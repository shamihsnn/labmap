import * as dotenv from 'dotenv';
dotenv.config({ path: './.env' });
import express from 'express';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import path from 'path';
import fetch from 'node-fetch';
import crypto from 'crypto';
import jwt from 'jsonwebtoken';
import { GoogleGenerativeAI } from '@google/generative-ai';
import multer from 'multer';
import compression from 'compression';
import nodemailer from 'nodemailer';
import cookieParser from 'cookie-parser';

// Log environment details
console.log('Current working directory:', process.cwd());
console.log('.env file path:', path.join(process.cwd(), '.env'));
console.log('API Key loaded:', process.env.GEMINI_API_KEY ? 'Yes' : 'No');

// JWT Secret Key
const JWT_SECRET = process.env.JWT_SECRET || crypto.randomBytes(64).toString('hex');
console.log('JWT Secret generated');

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const app = express();
const conversationHistory = new Map();
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

// Admin credentials - In production, these should be in environment variables
const ADMIN_USERNAME = "admin";
const ADMIN_PASSWORD = "admin123";

// Basic middleware setup
app.use(express.json({limit: '100mb'}));
app.use(express.urlencoded({limit: '100mb', extended: true, parameterLimit: 50000}));
app.use(compression());
app.use(express.static('public'));
app.use(express.static('views'));
app.use('/video', express.static('video'));
app.use('/public', express.static(path.join(__dirname, '../public')));
app.use('/images', express.static(path.join(__dirname, '../images')));
app.use(cookieParser());

// Admin authentication middleware
function authenticateAdmin(req, res, next) {
    // Try to get token from cookie
    const token = req.cookies && req.cookies.adminToken;
    console.log('JWT from cookie:', token);
    if (!token) {
        return res.redirect('/admin/login');
    }
    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (error) {
        console.log('Token verification failed:', error.message);
        return res.redirect('/admin/login');
    }
}

// Admin routes
app.get('/admin/login', (req, res) => {
    res.sendFile(path.join(__dirname, '../views/admin-login.html'));
});

app.post('/admin/login', express.json(), (req, res) => {
    const { username, password } = req.body;
    if (username === ADMIN_USERNAME && password === ADMIN_PASSWORD) {
        const token = jwt.sign(
            { username, role: 'admin' },
            JWT_SECRET,
            { expiresIn: '2h' }
        );
        // Set JWT as HTTP-only cookie
        res.cookie('adminToken', token, {
            httpOnly: true,
            maxAge: 2 * 60 * 60 * 1000, // 2 hours
            sameSite: 'lax',
        });
        res.json({ success: true });
    } else {
        res.status(401).json({ error: 'Invalid credentials' });
    }
});

// Logout: clear the cookie
app.post('/admin/logout', (req, res) => {
    res.clearCookie('adminToken');
    res.json({ success: true });
});

// Token verify for AJAX (optional, for fetch-based checks)
app.post('/admin/verify-token', (req, res) => {
    const token = req.cookies && req.cookies.adminToken;
    if (!token) return res.status(401).json({ error: 'No token' });
    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        res.json({ valid: true, user: decoded });
    } catch (error) {
        res.status(401).json({ error: 'Invalid token' });
    }
});

app.get('/admin', authenticateAdmin, (req, res) => {
    res.sendFile(path.join(__dirname, '../views/admin.html'));
});

// ApiMedic credentials
const USERNAME = "x5NRy_GMAIL_COM_AUT";
const PASSWORD = "i5YJn4x3WPz92DaRg";
const AUTH_URL = "https://authservice.priaid.ch/login";
const BASE_URL = "https://healthservice.priaid.ch";

// Initialize ratings storage
const ratings = {};

// Generate authentication hash
function generateAuthHash() {
    const rawHash = crypto
        .createHmac('md5', PASSWORD)
        .update(AUTH_URL)
        .digest('base64');
    return rawHash;
}

async function getToken() {
    const computedHash = generateAuthHash();
    const response = await fetch(AUTH_URL, {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${USERNAME}:${computedHash}`
        }
    });
    const data = await response.json();
    return data.Token;
}

// API Routes
app.get('/api/symptoms', async (req, res) => {
    try {
        const token = await getToken();
        const response = await fetch(
            `${BASE_URL}/symptoms?token=${token}&language=en-gb`
        );
        const data = await response.json();
        res.json(data);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

app.post('/api/diagnosis', async (req, res) => {
    try {
        const { symptoms, gender, yearOfBirth } = req.body;
        const token = await getToken();
        const response = await fetch(
            `${BASE_URL}/diagnosis?symptoms=${JSON.stringify(symptoms)}&gender=${gender}&year_of_birth=${yearOfBirth}&token=${token}&language=en-gb`
        );
        const data = await response.json();
        res.json(data);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

app.post('/api/ratings', (req, res) => {
    const { labName, rating, review } = req.body;
    try {
        if (!ratings[labName]) {
            ratings[labName] = [];
        }
        ratings[labName].push({ rating, review, date: new Date() });
        res.json({ success: true });
    } catch (error) {
        res.status(500).json({ error: 'Failed to save rating' });
    }
});

app.get('/api/ratings/:labName', (req, res) => {
    const { labName } = req.params;
    try {
        const labRatings = ratings[labName] || [];
        res.json(labRatings);
    } catch (error) {
        res.status(500).json({ error: 'Failed to fetch ratings' });
    }
});

// Updated Article Search API endpoint with fallbacks
app.get('/api/semantic-scholar', async (req, res) => {
    const { query } = req.query;
    
    if (!query) {
        return res.status(400).json({ error: 'Query parameter is required' });
    }
    
    // Try Semantic Scholar first
    try {
        const response = await fetch(`https://api.semanticscholar.org/graph/v1/paper/search?query=${encodeURIComponent(query)}&limit=10&fields=title,authors,year,venue,abstract,url`);
        
        // If we hit rate limit or any other error, try fallback APIs
        if (response.status === 429 || !response.ok) {
            console.log(`Semantic Scholar API returned ${response.status}. Trying fallback APIs...`);
            throw new Error(`Semantic Scholar API returned ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        return res.json({ papers: data.data, source: 'Semantic Scholar' });
    } catch (error) {
        console.log('Falling back to alternative article sources');
        // Attempt PubMed as first fallback
        try {
            // First search for IDs
            const searchResponse = await fetch(
                `https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term=${encodeURIComponent(query)}&retmode=json&retmax=10`
            );
            
            if (!searchResponse.ok) {
                throw new Error(`PubMed search API returned ${searchResponse.status}`);
            }
            
            const searchData = await searchResponse.json();
            const ids = searchData.esearchresult.idlist;
            
            if (!ids || ids.length === 0) {
                // Try arXiv if PubMed has no results
                throw new Error('No PubMed results found');
            }
            
            // Get details for each ID
            const summaryResponse = await fetch(
                `https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=pubmed&id=${ids.join(',')}&retmode=json`
            );
            
            if (!summaryResponse.ok) {
                throw new Error(`PubMed summary API returned ${summaryResponse.status}`);
            }
            
            const summaryData = await summaryResponse.json();
            
            // Format PubMed data to match our expected structure
            const papers = ids.map(id => {
                const article = summaryData.result[id];
                if (!article) return null;
                
                return {
                    title: article.title || 'Unknown Title',
                    authors: article.authors ? article.authors.map(author => ({ name: author.name || 'Unknown Author' })) : [],
                    year: article.pubdate ? article.pubdate.substring(0, 4) : 'Unknown Year',
                    venue: article.fulljournalname || article.source || 'PubMed Journal',
                    abstract: article.description || article.comment || '',
                    url: `https://pubmed.ncbi.nlm.nih.gov/${id}/`,
                };
            }).filter(paper => paper !== null);
            
            return res.json({ papers, source: 'PubMed' });
        } catch (pubmedError) {
            console.log('PubMed fallback failed, trying arXiv:', pubmedError.message);
            
            // Try arXiv as second fallback
            try {
                const arXivResponse = await fetch(
                    `https://export.arxiv.org/api/query?search_query=${encodeURIComponent(query)}&start=0&max_results=10`
                );
                
                if (!arXivResponse.ok) {
                    throw new Error(`arXiv API returned ${arXivResponse.status}`);
                }
                
                const text = await arXivResponse.text();
                
                // Extract entries and parse them manually
                const entries = [];
                const entryMatches = text.match(/<entry>([\s\S]*?)<\/entry>/g) || [];
                
                for (const entryXml of entryMatches) {
                    // Extract data using regex
                    const title = (entryXml.match(/<title[^>]*>([\s\S]*?)<\/title>/) || [])[1]?.trim().replace(/\s+/g, ' ') || 'Unknown Title';
                    const published = (entryXml.match(/<published>([\s\S]*?)<\/published>/) || [])[1]?.trim() || '';
                    const year = published.substring(0, 4) || 'Unknown Year';
                    const summary = (entryXml.match(/<summary[^>]*>([\s\S]*?)<\/summary>/) || [])[1]?.trim().replace(/\s+/g, ' ') || '';
                    const url = (entryXml.match(/<id>([\s\S]*?)<\/id>/) || [])[1]?.trim() || '';
                    
                    // Manual author extraction with fixed regex pattern
                    const authors = [];
                    // First try with name tag
                    let authorMatches = entryXml.match(/<author><name>([\s\S]*?)<\/name><\/author>/g);
                    
                    if (authorMatches && authorMatches.length > 0) {
                        authorMatches.forEach(match => {
                            const authorName = match.match(/<name>([\s\S]*?)<\/name>/);
                            if (authorName && authorName[1]) {
                                authors.push({ name: authorName[1].trim() });
                            }
                        });
                    }
                    
                    entries.push({
                        title,
                        authors: authors.length > 0 ? authors : [{ name: 'Unknown Author' }],
                        year,
                        venue: 'arXiv',
                        abstract: summary,
                        url
                    });
                }
                
                return res.json({ papers: entries, source: 'arXiv' });
            } catch (arXivError) {
                console.log('arXiv fallback failed, trying CORE:', arXivError.message);
                
                // Try CORE as third fallback
                try {
                    // CORE API (doesn't require API key for basic search)
                    const coreResponse = await fetch(
                        `https://core.ac.uk/api-v2/search/${encodeURIComponent(query)}?page=1&pageSize=10&metadata=true&fulltext=false&citations=false&similar=false&duplicate=false&urls=true&faithfulMetadata=false&apiKey=`
                    );
                    
                    if (!coreResponse.ok) {
                        throw new Error(`CORE API returned ${coreResponse.status}`);
                    }
                    
                    const coreData = await coreResponse.json();
                    
                    if (!coreData.data || coreData.data.length === 0) {
                        throw new Error('No CORE results found');
                    }
                    
                    // Format CORE data to match our expected structure
                    const papers = coreData.data.map(article => {
                        return {
                            title: article.title || 'Unknown Title',
                            authors: article.authors ? article.authors.map(name => ({ name })) : [],
                            year: article.year || 'Unknown Year',
                            venue: article.publisher || 'Academic Repository',
                            abstract: article.description || '',
                            url: article.downloadUrl || article.identifiers?.find(id => id.startsWith('http')) || '',
                        };
                    });
                    
                    return res.json({ papers, source: 'CORE' });
                } catch (coreError) {
                    // All fallbacks failed
                    console.error('All article APIs failed:', coreError);
                    return res.status(500).json({
                        error: 'Unable to retrieve articles from any source',
                        message: 'We are experiencing temporary issues with our article search providers. Please try again later.'
                    });
                }
            }
        }
    }
});

// Page Routes
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, '../views/index.html'));
});

app.get('/semantic-scholar', (req, res) => {
    res.sendFile(path.join(__dirname, '../views/semantic-scholar.html'));
});

app.get('/video', (req, res) => {
    res.sendFile(path.join(__dirname, '../views/video.html'));
});

app.get('/chatbot', (req, res) => {
    res.sendFile(path.join(__dirname, '../views/chatbot.html'));
});

app.get('/symptoms', (req, res) => {
    res.sendFile(path.join(__dirname, '../views/symptoms.html'));
});

const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});


app.get('/ambulance-loader.svg', (req, res) => {
    res.sendFile(path.join(__dirname, '../public/ambulance-loader.svg'));
});


function formatAIResponse(text) {
    // Add markdown-style formatting
    const formatted = text
        // Format headings
        .replace(/^(.*?):\s*$/gm, '## $1\n')
        // Format lists
        .replace(/^[-*]\s+(.*?)$/gm, '• $1')
        // Format important points
        .replace(/(Important|Note|Warning):/g, '**$1:**')
        // Format medical terms
        .replace(/\b([A-Z][a-zA-Z]*(?:\s+[A-Z][a-zA-Z]*)*)\b(?=\s*:)/g, '**$1**')
        // Add line breaks for readability
        .replace(/\n\n/g, '\n\n<br>\n\n')
        // Format numbers and percentages
        .replace(/\b(\d+(?:\.\d+)?%?)\b/g, '<strong>$1</strong>')
    
        .replace(/\n---+\n/g, '\n<hr>\n');

    return `<div class="formatted-response">
        ${formatted}
    </div>`;
}




app.post('/api/medicalchatbot', async (req, res) => {
    const { message, imageData, sessionId } = req.body;
    
    try {
  
        let history = conversationHistory.get(sessionId) || [];
        
     
if (imageData) {
    const visionModel = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    
    const base64Data = imageData.replace(/^data:image\/\w+;base64,/, '');
    
    const prompt = {
        contents: [{
            parts: [{
                text: `You are a highly experienced medical professional with expertise in diagnostic imaging and radiology. Please analyze the provided medical image comprehensively and provide:
1. A detailed description of any visible anatomical structures
2. Identification and analysis of any abnormalities, lesions, or unusual patterns
3. Assessment of tissue density, contrast, and structural relationships
4. Comparison with normal anatomical references where applicable
5. Potential differential diagnoses based on visible features
6. Recommendations for additional imaging or tests if necessary
7. Technical evaluation of image quality, positioning, and any artifacts
8. Clear indication of the anatomical orientation and viewing perspective

Please present your findings in a structured format using standard medical terminology while also providing explanations in clear, understandable language. Note any limitations in the assessment due to image quality or positioning. Context: ${message}`
            }, {
                inlineData: {
                    mimeType: "image/jpeg",
                    data: base64Data
                }
            }]
        }]
    };

    try {
        const result = await visionModel.generateContent(prompt);
        const response = await result.response;
        const reply = response.text();
        
        history.push({ role: "user", content: `${message} [Image Analysis Request]` });
        history.push({ role: "assistant", content: reply });
        
        conversationHistory.set(sessionId, history);
        return res.json({ success: true, reply: formatAIResponse(reply) });
    } catch (imageError) {
        console.error('Vision Model Error:', imageError);
        
        // Fallback to text-only response if image analysis fails
        const textModel = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });
        const fallbackResult = await textModel.generateContent({
            contents: [{
                parts: [{
                    text: `I received an image but couldn't analyze it. How else can I help you with your medical question: ${message}`
                }]
            }]
        });
        
        const fallbackReply = fallbackResult.response.text();
        return res.json({ success: true, reply: fallbackReply });
    }
}

// Regular text conversation with memory
const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });


const formattedHistory = history.map(msg => ({
    role: msg.role === 'assistant' ? 'model' : 'user',
    parts: [{ text: msg.content }]
}));

const chat = model.startChat({
    history: formattedHistory,
    generationConfig: {
        maxOutputTokens: 2048,
    },
});

const result = await chat.sendMessage(message);
const response = await result.response;
const reply = response.text();

// Store history with 'assistant' role for consistency
history.push({ role: "user", content: message });
history.push({ role: "assistant", content: reply });

// Keep last 20 messages for memory efficiency
if (history.length > 20) {
    history = history.slice(-20);
}

conversationHistory.set(sessionId, history);


res.json({ 
    reply: formatAIResponse(reply),
    success: true 
});

    } catch (error) {
        console.error('Gemini API Error:', error);
        res.status(500).json({ 
            error: 'Failed to get response from AI',
            details: error.message,
            success: false 
        });
    }
});

app.get('/medicalchatbot', (req, res) => {
    res.sendFile(path.join(__dirname, '../views/medicalchatbot.html'));
});

// Configure nodemailer with environment variables
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
    }
});

// Log email configuration status
console.log('Email configuration:');
console.log('- EMAIL_USER configured:', !!process.env.EMAIL_USER);
console.log('- EMAIL_PASS configured:', !!process.env.EMAIL_PASS);

// Test email connection on startup
async function verifyEmailConfig() {
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
        console.warn('Email credentials not configured in .env file.');
        return;
    }
    
    try {
        await transporter.verify();
        console.log('Email server connection successful!');
    } catch (error) {
        console.error('Email server connection failed:', error.message);
    }
}

verifyEmailConfig();

// Enhanced email notification endpoint
app.post('/send-appointment-email', async (req, res) => {
    const { email, status, labName, date, time, patientName, service } = req.body;
    
    if (!email || !status || !labName) {
        return res.status(400).json({ error: 'Missing required fields' });
    }
    
    // Check if email is configured
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
        return res.status(500).json({ 
            error: 'Email not configured', 
            message: 'Email service is not configured on the server.' 
        });
    }
    
    const statusText = status === 'approved' ? 'approved' : 'rejected';
    const subject = `Appointment ${statusText} - ${labName}`;
    
    const mailOptions = {
        from: `"Lab Finder" <${process.env.EMAIL_USER}>`,
        to: email,
        subject: subject,
        html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                <h2 style="color: #333; text-align: center;">Appointment Update</h2>
                <div style="background: ${status === 'approved' ? '#d4edda' : '#f8d7da'}; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <p style="margin: 0; color: ${status === 'approved' ? '#155724' : '#721c24'};">
                        Your appointment at ${labName} has been ${statusText}.
                    </p>
                </div>
                <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
                    <h3 style="color: #333; margin-top: 0;">Appointment Details:</h3>
                    <p><strong>Patient Name:</strong> ${patientName || 'Not specified'}</p>
                    <p><strong>Service:</strong> ${service || 'General appointment'}</p>
                    <p><strong>Date:</strong> ${date || 'Not specified'}</p>
                    <p><strong>Time:</strong> ${time || 'Not specified'}</p>
                    <p><strong>Lab:</strong> ${labName}</p>
                </div>
                ${status === 'approved' ? `
                    <div style="margin-top: 20px;">
                        <h4 style="color: #333;">Important Information:</h4>
                        <ul style="color: #666;">
                            <li>Please arrive 10 minutes before your scheduled time</li>
                            <li>Bring any relevant medical records or prescriptions</li>
                            <li>Wear a mask and follow COVID-19 safety protocols</li>
                        </ul>
                    </div>
                ` : `
                    <div style="margin-top: 20px; color: #666;">
                        <p>We apologize for any inconvenience. Please feel free to schedule another appointment.</p>
                    </div>
                `}
                <div style="text-align: center; margin-top: 30px; color: #666;">
                    <p>Thank you for choosing our services.</p>
                    <p>If you have any questions, please contact us.</p>
                </div>
            </div>
        `
    };

    try {
        const info = await transporter.sendMail(mailOptions);
        console.log('Email sent successfully:', info.messageId);
        res.status(200).json({ 
            success: true, 
            message: 'Email sent successfully', 
            messageId: info.messageId 
        });
    } catch (error) {
        console.error('Error sending email:', error);
        res.status(500).json({ 
            error: 'Failed to send email', 
            details: error.message 
        });
    }
});

// New endpoint to test email configuration
app.post('/test-email', async (req, res) => {
    const { recipientEmail } = req.body;
    
    if (!recipientEmail) {
        return res.status(400).json({ error: 'Recipient email is required' });
    }
    
    // Check if email is configured
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
        return res.status(500).json({ 
            error: 'Email not configured', 
            message: 'Email service is not configured on the server.' 
        });
    }
    
    const mailOptions = {
        from: `"Lab Finder" <${process.env.EMAIL_USER}>`,
        to: recipientEmail,
        subject: 'Test Email from Lab Finder',
        html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                <h2 style="color: #333; text-align: center;">Test Email</h2>
                <p style="color: #666;">This is a test email from Lab Finder to verify the email configuration.</p>
                <p style="color: #666;">If you received this email, your email service is working correctly!</p>
                <div style="text-align: center; margin-top: 30px; color: #666;">
                    <p>Thank you for using Lab Finder.</p>
                </div>
            </div>
        `
    };

    try {
        const info = await transporter.sendMail(mailOptions);
        console.log('Test email sent successfully:', info.messageId);
        res.status(200).json({ 
            success: true, 
            message: 'Test email sent successfully', 
            messageId: info.messageId 
        });
    } catch (error) {
        console.error('Error sending test email:', error);
        res.status(500).json({ 
            error: 'Failed to send test email', 
            details: error.message 
        });
    }
});